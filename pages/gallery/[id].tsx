import { Web3Storage } from 'web3.storage';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { ConnectButton } from '@rainbow-me/rainbowkit';
import Head from 'next/head';
import ImageUploading from 'react-images-uploading';
import Image from 'next/image';
import useTableland from '../../hooks/useTableland';
import { v4 as uuidv4 } from 'uuid';
import { useAccount, useConnect } from 'wagmi';

const tableName = 'GalleryTracker_80001_570';

const galleryItem = {
    contractAddress: '0x2953399124f0cbb46d2cbacd8a89cf0599974963',
    imgURL: 'https://lh3.googleusercontent.com/ZOy0IHm9Ei4IL0Yl29Z_UkGTuThz1_yjjMKT3iDdmFSUIMOT_dMMpn7JzNH5fz19YQ9eGDereGzThVNVk2k3CEfSGKD0vRqd0I9TFh8',
    name: 'Bufficon',
};

const cids = [
    'https://bafkreigik6at5ak7rtopfawhhzgoayvdujaknvn4ljxizpdzes7jyq27uq.ipfs.dweb.link',
];

export default function Gallery() {
    const [imagesUploadedURLs, setImagesUploadedURLs] = useState<string[]>([]);
    const [imagesStaging, setImagesStaging] = useState([]);
    const tableland = useTableland();
    const router = useRouter();
    const { id } = router.query;
    const { isConnected } = useConnect();

    const onChange = (imageList: any, addUpdateIndex: any) => {
        // data for submit
        console.log(imageList, addUpdateIndex);
        console.log('image list: ', imageList);
        setImagesStaging(imageList);
    };

    const client = new Web3Storage({
        token: process.env.NEXT_PUBLIC_WEB3_STORAGE_API_KEY!,
        endpoint: new URL('https://api.web3.storage'),
    });

    const uploadImage = async (imageIndex: number) => {
        //     // Pack files into a CAR and send to web3.storage
        console.log(imagesStaging[imageIndex]);
        const rootCid = await client.put([imagesStaging[imageIndex]['file']], {
            wrapWithDirectory: false,
        }); // Promise<CIDString>
        //     // Get info on the Filecoin deals that the CID is stored in
        console.log('root CID:', rootCid);
        const info = await client.status(rootCid); // Promise<Status | undefined>
        console.log('info:', info);
        // if (tableland) {
        //     const writeRes = await tableland.write(
        //         `INSERT INTO ${tableName} VALUES ('${uuidv4()}', '${rootCid}');`
        //     );
        //     console.log('writeRes:', writeRes);
        // }
        setImagesUploadedURLs([
            ...imagesUploadedURLs,
            `https://${rootCid}.ipfs.dweb.link`,
        ]);
    };

    useEffect(() => {
        // Use covalent to find table name

        const getimagesUploadedURLs = async () => {
            if (tableland) {
                const { rows } = await tableland.read(
                    `SELECT * FROM ${tableName}`
                );
                console.log('Rows: ', rows);

                let tmp = [];
                for (const file of rows) {
                    tmp.push(`https://${file[1]}.ipfs.dweb.link`);
                }
                console.log('fetched cips:', tmp);
                setImagesUploadedURLs(tmp);
            }
        };

        // getimagesUploadedURLs();
        setImagesUploadedURLs(cids);
        if (!isConnected && router) {
            router.push('/').then(() => router.reload());
        }
    }, [tableland]);

    return (
        <div className="flex flex-col h-screen">
            <Head>
                <title>Gallery</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <header className="p-4 bg-gray-500 flex flex-row justify-between">
                <div className="text-2xl font-bold text-gray-800 font-bitter">
                    DeGa
                </div>
                <div>
                    <ConnectButton
                        // chainStatus="none"
                        // showBalance={false}
                        accountStatus="address"
                    />
                </div>
            </header>
            <main className="flex-grow bg-gray-200 p-4">
                <div className="w-3/5 mx-auto mt-32">
                    <h2 className="font-bold text-4xl text-center mb-2">
                        Gallery: {galleryItem.name}
                    </h2>
                    <div className="w-full border-b-2 border-block border-black"></div>
                    <div className="mt-8 flex flex-row gap-8">
                        {imagesUploadedURLs &&
                            imagesUploadedURLs.map((url, index) => (
                                <div key={index} className="w-1/3">
                                    <div className="w-full">
                                        <Image
                                            src={`/api/imageproxy?url=${encodeURIComponent(
                                                url
                                            )}`}
                                            alt=""
                                            width="100%"
                                            height="100%"
                                            layout="responsive"
                                            objectFit="contain"
                                        />
                                    </div>
                                </div>
                            ))}
                    </div>

                    <h2 className="font-semibold text-2xl text-left mb-4 mt-16">
                        Add new pictures to the gallery
                    </h2>
                    <ImageUploading
                        multiple
                        value={imagesStaging}
                        onChange={onChange}
                        maxNumber={10}
                        dataURLKey="data_url"
                    >
                        {({
                            imageList,
                            onImageUpload,
                            onImageRemoveAll,
                            onImageUpdate,
                            onImageRemove,
                            isDragging,
                            dragProps,
                        }) => (
                            // write your building UI
                            <div className="">
                                <div className="flex flex-row justify-between">
                                    <button
                                        className="text-xl rounded-md bg-blue-500 p-4 font-bold mb-4"
                                        style={
                                            isDragging
                                                ? { color: 'red' }
                                                : undefined
                                        }
                                        onClick={onImageUpload}
                                        {...dragProps}
                                    >
                                        Click or Drop here
                                    </button>
                                    <button
                                        className="text-xl rounded-md bg-red-500 p-4 font-bold mb-4"
                                        onClick={onImageRemoveAll}
                                        disabled={imagesStaging.length < 1}
                                    >
                                        Remove all images
                                    </button>
                                </div>

                                <div className="flex flex-row gap-8">
                                    {imageList.map((image, index) => (
                                        <div key={index} className="w-1/3">
                                            <div className="w-full">
                                                <Image
                                                    src={image['data_url']}
                                                    alt=""
                                                    width="100%"
                                                    height="100%"
                                                    layout="responsive"
                                                    objectFit="contain"
                                                />
                                            </div>

                                            <div className="flex flex-row justify-between p-2">
                                                <button
                                                    className="text-xl font-bold rounded-md text-green-500 bg-gray-300 p-2"
                                                    onClick={() =>
                                                        onImageUpdate(index)
                                                    }
                                                >
                                                    Update
                                                </button>
                                                <button
                                                    className="text-xl font-bold rounded-md text-red-500 bg-gray-300 p-2"
                                                    onClick={() =>
                                                        onImageRemove(index)
                                                    }
                                                >
                                                    Remove
                                                </button>
                                                <button
                                                    className="text-xl font-bold rounded-md text-blue-500 bg-gray-300 p-2"
                                                    onClick={() => {
                                                        uploadImage(index)
                                                            .then(() => {
                                                                console.log(
                                                                    'image upload successful'
                                                                );
                                                                onImageRemove(
                                                                    index
                                                                );
                                                            })
                                                            .catch(() => {
                                                                console.log(
                                                                    'upload failed'
                                                                );
                                                            });
                                                    }}
                                                >
                                                    Upload
                                                </button>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}
                    </ImageUploading>

                    {/* <h2 className="font-semibold text-2xl text-left mb-4 mt-10">
                        Chat
                    </h2> */}
                </div>
            </main>
            <footer className="p-4 bg-green-200 text-center mt-auto">
                Built with ❤️ by Jan
            </footer>
        </div>
    );
}
